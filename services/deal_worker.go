package services

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"sync"
	"time"

	"hostmanager/models"

	"github.com/beego/beego/v2/client/orm"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	qrcode "github.com/skip2/go-qrcode"
)

var (
	workers   = make(map[int64]*DealWorker)
	workersMu sync.RWMutex
)

type DealWorker struct {
	Host           models.Host
	LastCursor     string
	ActiveDeals    map[int64]string // dealID ‚Üí messageID
	ProcessedDeals sync.Map         // dealID ‚Üí timestamp (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö)
	cancel         context.CancelFunc
	processingMu   sync.Mutex // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–æ–∫
}

func StartDealWorker(host models.Host) {
	workersMu.Lock()
	defer workersMu.Unlock()

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –≤–æ—Ä–∫–µ—Ä –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if oldWorker, exists := workers[host.Id]; exists {
		oldWorker.stop()
		delete(workers, host.Id)
	}

	ctx, cancel := context.WithCancel(context.Background())
	w := &DealWorker{
		Host:        host,
		ActiveDeals: make(map[int64]string),
		cancel:      cancel,
	}
	workers[host.Id] = w

	// –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
	if host.User != nil && host.User.TelegramChatID != 0 {
		ClearUserMessages(host.User.TelegramChatID, w)
	}

	go w.run(ctx)
	log.Printf("–í–æ—Ä–∫–µ—Ä –¥–ª—è —Ö–æ—Å—Ç–∞ %d –∑–∞–ø—É—â–µ–Ω", host.Id)
}

func (w *DealWorker) run(ctx context.Context) {
	ticker := time.NewTicker(3 * time.Second) // –£–≤–µ–ª–∏—á–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			log.Printf("–í–æ—Ä–∫–µ—Ä –¥–ª—è —Ö–æ—Å—Ç–∞ %d –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", w.Host.Id)
			return
		case <-ticker.C:
			w.checkDeals()
		}
	}
}

func (w *DealWorker) stop() {
	if w.cancel != nil {
		w.cancel()
	}
}

func StopDealWorker(hostID int64) {
	workersMu.Lock()
	defer workersMu.Unlock()

	if w, exists := workers[hostID]; exists {
		w.stop()
		delete(workers, hostID)
		log.Printf("–í–æ—Ä–∫–µ—Ä –¥–ª—è —Ö–æ—Å—Ç–∞ %d –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", hostID)
	}
}

func (w *DealWorker) checkDeals() {
	w.processingMu.Lock()
	defer w.processingMu.Unlock()

	url := "https://app.cr.bot/internal/v1/p2c/payments?size=20&status=processing" // –£–º–µ–Ω—å—à–∏–ª —Ä–∞–∑–º–µ—Ä
	if w.LastCursor != "" {
		url += "&cursor=" + w.LastCursor
	}

	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return
	}
	req.Header.Set("Cookie", "access_token="+w.Host.AccessToken)

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ö–æ—Å—Ç–∞ %d: %v", w.Host.Id, err)
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		log.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –¥–ª—è —Ö–æ—Å—Ç–∞ %d: %d", w.Host.Id, resp.StatusCode)
		return
	}

	var result struct {
		Data   []DealPreview `json:"data"`
		Cursor string        `json:"cursor"`
	}

	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è —Ö–æ—Å—Ç–∞ %d: %v", w.Host.Id, err)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
	if result.Cursor != "" {
		w.LastCursor = result.Cursor
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	o := orm.NewOrm()
	if err := o.Read(&w.Host); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ö–æ—Å—Ç–∞ %d: %v", w.Host.Id, err)
		return
	}

	if w.Host.User == nil {
		if err := o.LoadRelated(&w.Host, "User"); err != nil || w.Host.User == nil {
			log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ö–æ—Å—Ç–∞ %d", w.Host.Id)
			return
		}
	}

	if w.Host.User.TelegramChatID == 0 {
		log.Printf("TelegramChatID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—Å—Ç–∞ %d", w.Host.Id)
		return
	}

	chatID := w.Host.User.TelegramChatID

	// –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
	currentDealIDs := make(map[int64]bool)
	for _, deal := range result.Data {
		currentDealIDs[deal.ID] = true
	}

	// –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
	for dealID, msgID := range w.ActiveDeals {
		if !currentDealIDs[dealID] {
			// –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			if err := w.deleteTelegramMessage(chatID, msgID); err == nil {
				delete(w.ActiveDeals, dealID)
				w.ProcessedDeals.Delete(dealID)
				log.Printf("–£–¥–∞–ª–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞ %d –¥–ª—è —Ö–æ—Å—Ç–∞ %d", dealID, w.Host.Id)
			}
		}
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏
	for _, deal := range result.Data {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É —Å–¥–µ–ª–∫—É
		if _, processed := w.ProcessedDeals.Load(deal.ID); processed {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —É–∂–µ —Å–¥–µ–ª–∫–∞
		if _, isActive := w.ActiveDeals[deal.ID]; isActive {
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏
		details, err := w.getDealDetails(deal.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–¥–µ–ª–∫–∏ %d: %v", deal.ID, err)
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
		msgID, err := w.sendTelegramMessage(chatID, details)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–¥–µ–ª–∫–∏ %d: %v", deal.ID, err)
			continue
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
		w.ActiveDeals[deal.ID] = fmt.Sprintf("%d", msgID)
		w.ProcessedDeals.Store(deal.ID, time.Now())

		// –õ–æ–≥–∏—Ä—É–µ–º –≤ –±–∞–∑—É
		hostLog := models.HostLog{
			Host:  &models.Host{Id: w.Host.Id},
			Level: "bounty",
			Message: fmt.Sprintf("https://app.cr.bot/p2c/orders/%d –°—É–º–º–∞: %s %s –ú–∞–≥–∞–∑–∏–Ω: %s",
				details.ID, details.InAmount, details.InAsset, details.BrandName),
		}
		if _, err := o.Insert(&hostLog); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ %d: %v", deal.ID, err)
		}

		log.Printf("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ %d –¥–ª—è —Ö–æ—Å—Ç–∞ %d", deal.ID, w.Host.Id)

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–¥–µ–ª–æ–∫
		time.Sleep(100 * time.Millisecond)
	}
}

func (w *DealWorker) deleteTelegramMessage(chatID int64, msgID string) error {
	if Bot == nil {
		return fmt.Errorf("–±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	}

	msg := tgbotapi.NewDeleteMessage(chatID, toInt(msgID))
	_, err := Bot.Send(msg)
	return err
}

func toInt(s string) int {
	i, _ := strconv.Atoi(s)
	return i
}

func ClearUserMessages(chatID int64, w *DealWorker) {
	for dealID, msgID := range w.ActiveDeals {
		w.deleteTelegramMessage(chatID, msgID)
		delete(w.ActiveDeals, dealID)
		w.ProcessedDeals.Delete(dealID)
	}
}

func (w *DealWorker) getDealDetails(dealID int64) (*DealDetails, error) {
	url := fmt.Sprintf("https://app.cr.bot/internal/v1/p2c/payments/%d", dealID)
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Cookie", "access_token="+w.Host.AccessToken)

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		return nil, fmt.Errorf("status %d", resp.StatusCode)
	}

	var result struct {
		Data DealDetails `json:"data"`
	}

	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, err
	}

	return &result.Data, nil
}

func (w *DealWorker) sendTelegramMessage(chatID int64, deal *DealDetails) (int, error) {
	if Bot == nil {
		return 0, fmt.Errorf("–±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	}

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
	var photoMsgID int
	png, err := qrcode.Encode(deal.Url, qrcode.Medium, 256)
	if err == nil {
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileBytes{
			Name:  fmt.Sprintf("qr_%d.png", deal.ID),
			Bytes: png,
		})
		sentPhoto, err := Bot.Send(photo)
		if err == nil {
			photoMsgID = sentPhoto.MessageID
		}
	}

	// –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	text := fmt.Sprintf(
		"üí≥ <b>–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</b>\n"+
			"https://app.cr.bot/p2c/orders/%d\n"+
			"–°—É–º–º–∞: %s %s\n–ú–∞–≥–∞–∑–∏–Ω: %s\n\n"+
			"üîó <a href=\"%s\">–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É</a>",
		deal.ID, deal.InAmount, deal.InAsset, deal.BrandName, deal.Url)

	callbackData := fmt.Sprintf("complete_%d_%d", w.Host.Id, deal.ID)
	btn := tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û–ø–ª–∞—Ç–∏–ª", callbackData)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(btn),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	msg.ParseMode = "HTML"

	sent, err := Bot.Send(msg)
	if err != nil {
		// –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)
		if photoMsgID != 0 {
			w.deleteTelegramMessage(chatID, fmt.Sprintf("%d", photoMsgID))
		}
		return 0, err
	}

	return sent.MessageID, nil
}

// –ü–æ–ª—É—á–∏—Ç—å –≤–æ—Ä–∫–µ—Ä –ø–æ ID —Ö–æ—Å—Ç–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
func GetWorker(hostID int64) *DealWorker {
	workersMu.RLock()
	defer workersMu.RUnlock()
	return workers[hostID]
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
type DealPreview struct {
	ID     int64  `json:"id"`
	Asset  string `json:"asset"`
	Fiat   string `json:"fiat"`
	Amount string `json:"amount"`
	Status string `json:"status"`
}

type DealDetails struct {
	ID           int64  `json:"id"`
	BrandName    string `json:"brand_name"`
	InAmount     string `json:"in_amount"`
	InAsset      string `json:"in_asset"`
	OutAmount    string `json:"out_amount"`
	OutAsset     string `json:"out_asset"`
	ExchangeRate string `json:"exchange_rate"`
	RewardAmount string `json:"reward_amount"`
	Status       string `json:"status"`
	Url          string `json:"url"`
}
