package services

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"sync"
	"time"

	"hostmanager/models"

	"github.com/beego/beego/v2/client/orm"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	qrcode "github.com/skip2/go-qrcode"
)

var (
	workers   = make(map[int64]*DealWorker)
	workersMu sync.Mutex
)

type DealWorker struct {
	Host        models.Host
	LastCursor  string
	ActiveDeals map[int64]int      // dealID ‚Üí messageID (int) ‚Äî changed from string
	seen        map[int64]struct{} // –ª–æ–∫–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
	mu          sync.Mutex         // –∑–∞—â–∏—Ç–∞ –¥–ª—è –ø–æ–ª–µ–π –≤–æ—Ä–∫–µ—Ä–∞
	cancel      context.CancelFunc
}

func StartDealWorker(host models.Host) {
	workersMu.Lock()
	defer workersMu.Unlock()

	if _, exists := workers[host.Id]; exists {
		return
	}
	ctx, cancel := context.WithCancel(context.Background())
	w := &DealWorker{
		Host:        host,
		ActiveDeals: make(map[int64]int),
		seen:        make(map[int64]struct{}),
		cancel:      cancel,
	}
	workers[host.Id] = w

	// –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–µ–ª–∞–µ–º —ç—Ç–æ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)
	if host.User != nil && host.User.TelegramChatID != 0 {
		w.ClearUserMessages(host.User.TelegramChatID)
	}

	go w.run(ctx)
}

func (w *DealWorker) run(ctx context.Context) {
	ticker := time.NewTicker(2 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			log.Printf("–í–æ—Ä–∫–µ—Ä –¥–ª—è —Ö–æ—Å—Ç–∞ %d –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", w.Host.Id)
			return
		case <-ticker.C:
			w.checkDeals()
		}
	}
}
func (w *DealWorker) stop() {
	w.cancel()
}
func StopDealWorker(hostID int64) {
	workersMu.Lock()
	defer workersMu.Unlock()

	if w, exists := workers[hostID]; exists {
		w.stop()
		delete(workers, hostID)
		log.Printf("–í–æ—Ä–∫–µ—Ä –¥–ª—è —Ö–æ—Å—Ç–∞ %d –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", hostID)
	}
}

func (w *DealWorker) checkDeals() {
	// –§–æ—Ä–º–∏—Ä—É–µ–º URL; –µ—Å–ª–∏ LastCursor —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
	w.mu.Lock()
	url := "https://app.cr.bot/internal/v1/p2c/payments?size=40&status=processing"
	if w.LastCursor != "" {
		url += "&cursor=" + w.LastCursor
	}
	accessToken := w.Host.AccessToken
	w.mu.Unlock()

	req, _ := http.NewRequest("GET", url, nil)
	req.Header.Set("Cookie", "access_token="+accessToken)

	client := &http.Client{Timeout: 5 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("checkDeals: http error: %v", err)
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		log.Printf("checkDeals: status %d", resp.StatusCode)
		return
	}

	var result struct {
		Data   []DealPreview `json:"data"`
		Cursor string        `json:"cursor"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		log.Printf("checkDeals: decode error: %v", err)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ
	w.mu.Lock()
	// –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å–æ—Ä ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –æ–Ω.
	if result.Cursor != "" {
		w.LastCursor = result.Cursor
	}
	w.mu.Unlock()

	o := orm.NewOrm()
	o.LoadRelated(&w.Host, "User")
	if w.Host.User == nil || w.Host.User.TelegramChatID == 0 {
		return
	}
	chatID := w.Host.User.TelegramChatID

	currentIDs := make(map[int64]struct{})
	for _, d := range result.Data {
		currentIDs[d.ID] = struct{}{}
	}

	// 1Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ (—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤ ActiveDeals –±–æ–ª—å—à–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è)
	w.mu.Lock()
	for id, msgID := range w.ActiveDeals {
		if _, stillActive := currentIDs[id]; !stillActive {
			// —Å–¥–µ–ª–∫–∞ –ø—Ä–æ–ø–∞–ª–∞ ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–∑ Telegram
			msg := tgbotapi.NewDeleteMessage(chatID, msgID)
			if _, err := Bot.Send(msg); err != nil {
				log.Printf("Clear Telegram message %d failed: %v", msgID, err)
			}
			delete(w.ActiveDeals, id)
			delete(w.seen, id) // –º–æ–∂–Ω–æ –∑–∞–±—ã—Ç—å –∏–∑ seen, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–π —Å–¥–µ–ª–∫–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
		}
	}
	w.mu.Unlock()

	// 2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
	for _, deal := range result.Data {
		w.mu.Lock()
		if _, exists := w.ActiveDeals[deal.ID]; exists {
			w.mu.Unlock()
			continue // —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
		}
		if _, wasSeen := w.seen[deal.ID]; wasSeen {
			// —É–∂–µ –æ–¥–Ω–∞–∂–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ API)
			w.mu.Unlock()
			continue
		}
		w.mu.Unlock()

		details, err := w.getDealDetails(deal.ID)
		if err != nil {
			log.Printf("getDealDetails error for %d: %v", deal.ID, err)
			continue
		}
		msgID := w.sendTelegramMessage(chatID, details)
		if msgID != 0 {
			w.mu.Lock()
			w.ActiveDeals[deal.ID] = msgID
			w.seen[deal.ID] = struct{}{}
			w.mu.Unlock()
		}

		hostLog := models.HostLog{
			Host:  &w.Host,
			Level: "bounty",
			Message: fmt.Sprintf("https://app.cr.bot/p2c/orders/%d  –°—É–º–º–∞: %s %s –ú–∞–≥–∞–∑–∏–Ω: %s",
				details.ID, details.InAmount, details.InAsset, details.BrandName),
		}
		if _, err := o.Insert(&hostLog); err != nil {
			log.Printf("HostLog insert error: %v", err)
		}
	}
}

func ClearUserMessages(chatID int64, w *DealWorker) {
	// –£–¥–æ–±–Ω–æ –∏–º–µ—Ç—å –º–µ—Ç–æ–¥, –Ω–æ –ø—É—Å—Ç—å –æ–Ω –±–µ—Ä—ë—Ç w.mu
	w.mu.Lock()
	defer w.mu.Unlock()
	for _, msgID := range w.ActiveDeals {
		msg := tgbotapi.NewDeleteMessage(chatID, msgID)
		if _, err := Bot.Send(msg); err != nil {
			log.Printf("ClearUserMessages: failed to delete %d: %v", msgID, err)
		}
	}
	w.ActiveDeals = make(map[int64]int)
	w.seen = make(map[int64]struct{})
}

func (w *DealWorker) ClearUserMessages(chatID int64) {
	// –º–µ—Ç–æ–¥-–æ–±—ë—Ä—Ç–∫–∞: –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ
	w.mu.Lock()
	defer w.mu.Unlock()
	for _, msgID := range w.ActiveDeals {
		msg := tgbotapi.NewDeleteMessage(chatID, msgID)
		if _, err := Bot.Send(msg); err != nil {
			log.Printf("ClearUserMessages: failed to delete %d: %v", msgID, err)
		}
	}
	w.ActiveDeals = make(map[int64]int)
	w.seen = make(map[int64]struct{})
}

func (w *DealWorker) getDealDetails(dealID int64) (*DealDetails, error) {
	url := fmt.Sprintf("https://app.cr.bot/internal/v1/p2c/payments/%d", dealID)
	req, _ := http.NewRequest("GET", url, nil)

	w.mu.Lock()
	accessToken := w.Host.AccessToken
	w.mu.Unlock()
	req.Header.Set("Cookie", "access_token="+accessToken)

	client := &http.Client{Timeout: 5 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		return nil, fmt.Errorf("status %d", resp.StatusCode)
	}

	var result struct {
		Data DealDetails `json:"data"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, err
	}
	return &result.Data, nil
}

func (w *DealWorker) sendTelegramMessage(chatID int64, deal *DealDetails) int {
	if Bot == nil {
		return 0
	}

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ (–µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º –±–µ–∑ —Ñ–æ—Ç–æ)
	var photoFile tgbotapi.FileBytes
	png, err := qrcode.Encode(deal.Url, qrcode.Medium, 256)
	if err == nil {
		photoFile = tgbotapi.FileBytes{
			Name:  fmt.Sprintf("qr_%d.png", deal.ID),
			Bytes: png,
		}
	}

	// –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (caption). Telegram captions –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã ‚Äî –¥–ª–∏–Ω—É –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Å–∞–º–∏.
	caption := fmt.Sprintf(
		"üí≥ <b>–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</b>\n"+
			"https://app.cr.bot/p2c/orders/%d\n"+
			"–°—É–º–º–∞: %s %s\n–ú–∞–≥–∞–∑–∏–Ω: %s\n\n"+
			"üîó <a href=\"%s\">–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É</a>",
		deal.ID, deal.InAmount, deal.InAsset, deal.BrandName, deal.Url)

	callbackData := fmt.Sprintf("complete_%d_%d", w.Host.Id, deal.ID)
	btn := tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û–ø–ª–∞—Ç–∏–ª", callbackData)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(btn),
	)

	if len(photoFile.Bytes) > 0 {
		photo := tgbotapi.NewPhoto(chatID, photoFile)
		photo.Caption = caption
		photo.ParseMode = "HTML"
		photo.ReplyMarkup = keyboard
		sent, err := Bot.Send(photo)
		if err != nil {
			log.Printf("sendTelegramMessage: send photo failed: %v", err)
			return 0
		}
		return sent.MessageID
	}

	// –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	msg := tgbotapi.NewMessage(chatID, caption)
	msg.ReplyMarkup = keyboard
	msg.ParseMode = "HTML"

	sent, err := Bot.Send(msg)
	if err != nil {
		log.Printf("sendTelegramMessage: send msg failed: %v", err)
		return 0
	}
	return sent.MessageID
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã
type DealPreview struct {
	ID     int64  `json:"id"`
	Asset  string `json:"asset"`
	Fiat   string `json:"fiat"`
	Amount string `json:"amount"`
	Status string `json:"status"`
}

type DealDetails struct {
	ID           int64  `json:"id"`
	BrandName    string `json:"brand_name"`
	InAmount     string `json:"in_amount"`
	InAsset      string `json:"in_asset"`
	OutAmount    string `json:"out_amount"`
	OutAsset     string `json:"out_asset"`
	ExchangeRate string `json:"exchange_rate"`
	RewardAmount string `json:"reward_amount"`
	Status       string `json:"status"`
	Url          string `json:"url"`
}
